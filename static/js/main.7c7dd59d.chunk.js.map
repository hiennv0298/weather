{"version":3,"sources":["assets/thunder.jpg","assets/drizzle.jpg","assets/rain.jpg","assets/snow.jpg","assets/fog.jpg","assets/clear.jpg","assets/clouds.jpg","constants/Utils.ts","components/popup/carousel.js","components/popup/Weather.tsx","components/popup/Chart.tsx","components/popup/LeftComponent.tsx","components/map/map.tsx","pages/Home.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["unsignedString","obj","signString","split","unsignString","str","i","length","includes","idx","indexOf","join","getImageWithMain","main","background","ThunderStorm","Drizzle","Clouds","Rain","Snow","Atmosphere","Clear","Carousel","props","settings","arrows","arrowsBlock","autoplay","duration","pauseOnHover","autoplaySpeed","swipe","wheel","style","float","height","width","items","map","w","key","src","icon","size","alt","description","dislay","WeatherDetail","weather","click","forecast","useEffect","onClick","className","name","sys","country","timeSpan","date","Date","d","getDate","m","getMonth","getFullYear","toLocaleTimeString","formatTime","setUTCDate","toNumber","timezone","slice","temp","feels_like","temp_min","temp_max","pressure","sea_level","grnd_level","humidity","wind","speed","deg","clouds","all","rain","snow","Chart","data","labels","datasets","label","backgroundColor","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","type","options","maintainAspectRatio","LeftComponent","forwardRef","ref","useState","weathers","setWeathers","isShown","setIsShow","isShownChart","setIsShowChart","leftRef","useRef","useImperativeHandle","getValue","bg","setBackground","image","current","backgroundImage","coord","item","Weather","cities","require","MapComponent","childRef","L","setView","navigator","geolocation","getCurrentPosition","pos","crd","coords","latitude","longitude","err","enableHighAccuracy","timeout","maximumAge","tileLayer","attribution","addTo","drawn_items","featureGroup","drawControl","Control","Draw","position","draw","circle","polygon","polyline","circlemarker","edit","addControl","on","Event","CREATED","event","a","layer","addLayer","layerType","bound","getBounds","Promise","getWeathers","Error","console","log","_latlng","getWeather","alert","arrUnsign","arrUnsigned","prop","arr","forEach","v","unSignedArray","filter","city","contains","arrDup","Array","from","Set","objProp","find","requestLink","id","fetch","then","res","status","json","catch","lat","lng","Home","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.7c7dd59d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/thunder.a120abf7.jpg\";","export default __webpack_public_path__ + \"static/media/drizzle.7c780c16.jpg\";","export default __webpack_public_path__ + \"static/media/rain.79340b72.jpg\";","export default __webpack_public_path__ + \"static/media/snow.8ad4490a.jpg\";","export default __webpack_public_path__ + \"static/media/fog.33831f12.jpg\";","export default __webpack_public_path__ + \"static/media/clear.300111e2.jpg\";","export default __webpack_public_path__ + \"static/media/clouds.52b402cf.jpg\";","import ThunderStorm from '../assets/thunder.jpg'\r\nimport Drizzle from '../assets/drizzle.jpg'\r\nimport Rain from '../assets/rain.jpg'\r\nimport Snow from '../assets/snow.jpg'\r\nimport Atmosphere from '../assets/fog.jpg'\r\nimport Clear from '../assets/clear.jpg'\r\nimport Clouds from '../assets/clouds.jpg'\r\n\r\nexport { ThunderStorm, Drizzle, Rain, Snow, Atmosphere, Clear, Clouds }\r\n\r\n\r\nexport function removeDupWithProp(arrDup: any[], prop: string): any[] {\r\n    return Array.from(new Set(arrDup.map(v => v[prop]))).map(objProp => {\r\n        return arrDup.find(obj => obj[prop] === objProp)\r\n    });\r\n}\r\n\r\nexport function unSignedArray(arrUnsigned: any[], prop: string = \"\"): any[] {\r\n    let arr = [...arrUnsigned];\r\n    prop !== \"\" && arrUnsigned.forEach((v, i) => {\r\n        arr[i][prop] = unsignedString(v[prop]);\r\n    });\r\n    prop === \"\" && arrUnsigned.forEach((v, i) => {\r\n        arr[i] = unsignedString(v);\r\n    });\r\n    return arr;\r\n}\r\n\r\nexport function unsignedString(obj: string): string {\r\n    const signString = \"ăâđêôơưàảãạáằẳẵặắầẩẫậấèẻẽẹéềểễệếìỉĩịíòỏõọóồổỗộốờởỡợớùủũụúừửữựứỳỷỹỵýĂÂĐÊÔƠƯÀẢÃẠÁẰẲẴẶẮẦẨẪẬẤÈẺẼẸÉỀỂỄỆẾÌỈĨỊÍÒỎÕỌÓỒỔỖỘỐỜỞỠỢỚÙỦŨỤÚỪỬỮỰỨỲỶỸỴÝ\".split(\"\");\r\n    const unsignString = \"aadeoouaaaaaaaaaaaaaaaeeeeeeeeeeiiiiiooooooooooooooouuuuuuuuuuyyyyyAADEOOUAAAAAAAAAAAAAAAEEEEEEEEEEIIIIIOOOOOOOOOOOOOOOUUUUUUUUUUYYYYY\".split(\"\");\r\n    let str = obj.split(\"\");\r\n    for (let i = 0; i < obj.length; i++) {\r\n        if (signString.includes(obj[i])) {\r\n            const idx = signString.indexOf(obj[i]);\r\n            str[i] = unsignString[idx];\r\n        }\r\n    }\r\n    return str.join(\"\");\r\n}\r\n\r\nexport function getIcon(key: any, size?: string): string {\r\n    return `http://openweathermap.org/img/wn/${key}${size ? \"@\" + size : \"\"}.png`;\r\n}\r\n\r\nexport function formatTime(timeSpan: number): string {\r\n    const date = new Date(timeSpan);\r\n\r\n    const d = date.getDate();\r\n    const m = date.getMonth() + 1;\r\n    const y = date.getFullYear();\r\n    const f = date.toLocaleTimeString();\r\n\r\n    return (d <= 9 ? '0' + d : d) + '-' + (m <= 9 ? '0' + m : m) + '-' + y + ' ' + f;\r\n}\r\n\r\nexport function getImageWithMain(main?: string): string {\r\n    let background = \"Clear\";\r\n    switch (main) {\r\n        case \"ThunderStorm\":\r\n            background = ThunderStorm;\r\n            break;\r\n        case \"Drizzle\":\r\n            background = Drizzle;\r\n            break;\r\n        case \"Clouds\":\r\n            background = Clouds;\r\n            break;\r\n        case \"Rain\":\r\n            background = Rain;\r\n            break;\r\n        case \"Snow\":\r\n            background = Snow;\r\n            break;\r\n        case \"Atmosphere\":\r\n            background = Atmosphere;\r\n            break;\r\n        case \"Clear\":\r\n            background = Clear;\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n    return background;\r\n}\r\n","import React from 'react'\r\nimport Slider from 'infinite-react-carousel'\r\nimport { getIcon } from '../../constants/Utils'\r\n\r\nconst Carousel = (props) => {\r\n\r\n    const settings = {\r\n        arrows: false,\r\n        arrowsBlock: false,\r\n        autoplay: true,\r\n        duration: 1000,\r\n        pauseOnHover: false,\r\n        autoplaySpeed: 3000,\r\n        swipe: false,\r\n        wheel: true\r\n    }\r\n\r\n    return <div style={{ float: 'left', height: '50px', width:'50px' }}>\r\n        <Slider {...settings}>\r\n            {props.items && props.items.map((w, i) =>\r\n                <div key={i}>\r\n                    <img src={getIcon(w.icon)} alt={w.description} style={{height: '50px', width:'50px'}} />\r\n                </div>\r\n            )}\r\n        </Slider>\r\n    </div>\r\n}\r\n\r\nexport default Carousel","import { toNumber } from 'lodash'\r\nimport React, { useEffect } from 'react'\r\nimport { Weather } from '../../constants/typeDefinition'\r\nimport { formatTime } from '../../constants/Utils'\r\nimport { getImageWithMain } from '../../constants/Utils'\r\n\r\nimport Carousel from './carousel'\r\n\r\nconst style: any = {\r\n    dislay: 'inline-block'\r\n}\r\n\r\n\r\n\r\nconst WeatherDetail: React.FC<{ weather: Weather, click: any, forecast: any }> = ({ weather, click, forecast }) => {\r\n\r\n    let background = \"\";\r\n\r\n    const setImage = () => {\r\n        background = getImageWithMain(weather.weather[0].main);\r\n    }\r\n\r\n    useEffect(() => {\r\n        setImage(); \r\n    });\r\n\r\n\r\n    return (\r\n        <div>\r\n            {weather &&\r\n                <div style={style} onClick={() => click(background)} className=\"left-weather\">\r\n                    {/* <button className=\"forecast-button\" onClick={() => forecast(weather.coord)}>Forecast</button> */}\r\n                    <div className=\"weather-detail\">\r\n                        <div className=\"weather-header\">\r\n                            <Carousel items={weather.weather} />\r\n                            <span className=\"h2 text-between\">{weather.name} - {weather.sys.country}</span>\r\n                        </div>\r\n                        <div className=\"weather-body\">\r\n                            <span className=\"h3\">Current Time: {formatTime(new Date().setUTCDate(toNumber(weather.timezone)))}</span>\r\n                            <span className=\"h3\">Main: {weather.weather && weather.weather.map(w => w.main + \", \").join(\"\").slice(0, -2)}</span>\r\n                            <span className=\"h3\">Description: </span>\r\n                            <div className=\"weather-description\">\r\n                                {weather.weather && weather.weather.map((w, i) =>\r\n                                    <span key={i} className=\"h4\">{w.description}</span>\r\n                                )}\r\n                            </div>\r\n                            <span className=\"h3\">Temperature: {weather.main.temp}&#176;C</span>\r\n                            <div className=\"temperature\">\r\n                                <span className=\"h4\">Human feels like: {weather.main.feels_like}&#176;C</span>\r\n                                <span className=\"h4\">Min: {weather.main.temp_min}&#176;C</span>\r\n                                <span className=\"h4\">Max: {weather.main.temp_max}&#176;C</span>\r\n                            </div>\r\n                            <span className=\"h3\">Pressure: {weather.main.pressure} hPa</span>\r\n                            <div className=\"atmospheric\">\r\n                                <span className=\"h4\">Sea level: {weather.main.sea_level} hPa</span>\r\n                                <span className=\"h4\">Ground level: {weather.main.grnd_level} hPa</span>\r\n                            </div>\r\n                            <span className=\"h3\">Humidity: {weather.main.humidity} %</span>\r\n                            <span className=\"h3\">Wind:</span>\r\n                            <div className=\"wind\">\r\n                                <span className=\"h4\">Speed: {weather.wind.speed}m/s</span>\r\n                                <span className=\"h4\">Direction: {weather.wind.deg}</span>\r\n                                <span className=\"h4\">Gust: {weather.wind.speed}m/s</span>\r\n                            </div>\r\n                            <span className=\"h4\">Has Clouds: {weather.clouds.all}%</span>\r\n                            <span className=\"h4\">Rain:</span>\r\n                            <div className=\"rain\">\r\n                                <span className=\"h4\">Last 1h: {weather.rain?.[\"1h\"] ? weather.rain?.[\"1h\"] : \"0\"} mm</span>\r\n                                <span className=\"h4\">Last 3h: {weather.rain?.[\"3h\"] ? weather.rain?.[\"3h\"] : \"0\"} mm</span>\r\n                            </div>\r\n                            <span className=\"h4\">Snow:</span>\r\n                            <div className=\"snow\">\r\n                                <span className=\"h4\">Last 1h: {weather.snow?.[\"1h\"] ? weather.snow?.[\"1h\"] : \"0\"} mm</span>\r\n                                <span className=\"h4\">Last 3h: {weather.snow?.[\"3h\"] ? weather.snow?.[\"3h\"] : \"0\"} mm</span>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div >}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default WeatherDetail;","import React, { useState } from 'react'\r\nimport { Bar } from 'react-chartjs-2'\r\n\r\n\r\nconst Chart: React.FC<{}> = ({ }) => {\r\n\r\n    const data = {\r\n        labels: ['January', 'Feb2222ruary', 'March', 'April', 'May', 'June', 'July', 'January', 'February', 'March', 'April', 'May', 'June', 'July', 'June', 'July'],\r\n        datasets: [\r\n            {\r\n                label: '',\r\n                backgroundColor: 'rgba(255,99,132,0.2)',\r\n                borderColor: 'white',\r\n                borderWidth: 1,\r\n                hoverBackgroundColor: 'rgba(255,99,132,0.4)',\r\n                hoverBorderColor: 'black',\r\n                data: [65, 59, 80, 81, 56, 55, 40, 33, 33, 33, 33, 33, 33, 44, 22, 55, 99, 99]\r\n            }, {\r\n                label: '',\r\n                backgroundColor: 'rgba(233,44,22,0.2)',\r\n                borderColor: 'yellow',\r\n                borderWidth: 1,\r\n                hoverBackgroundColor: 'rgba(233,44,22,0.4)',\r\n                hoverBorderColor: 'orange',\r\n                data: [65, 59, 80, 81, 56, 55, 40, 33, 33, 33, 33, 33, 33, 44, 22, 55, 99, 99]\r\n            }\r\n        ]\r\n    };\r\n\r\n    return <>\r\n        <div className=\"chart\">\r\n            <Bar data={data} type={\"bar\"} width={2000} height={1000} options={{\r\n                maintainAspectRatio: false,\r\n                \r\n            }} />\r\n        </div>\r\n    </>\r\n}\r\n\r\nexport default Chart;","import React, { useState, useRef, forwardRef, useImperativeHandle } from 'react'\r\nimport { Weather } from '../../constants/typeDefinition'\r\nimport WeatherDetail from './Weather'\r\nimport { getImageWithMain } from '../../constants/Utils'\r\nimport Chart from './Chart'\r\n\r\nconst LeftComponent = forwardRef((props, ref) => {\r\n\r\n    const [weathers, setWeathers] = useState<Weather[]>([]);\r\n    const [isShown, setIsShow] = useState(false);\r\n    const [isShownChart, setIsShowChart] = useState(false);\r\n    const leftRef: any = useRef();\r\n\r\n    useImperativeHandle(\r\n        ref,\r\n        () => ({\r\n            getValue: (data: Weather[]) => {\r\n                setWeathers(data);\r\n                if (data.length > 0) {\r\n                    setIsShow(true);\r\n                    const bg = getImageWithMain(data[0]?.weather[0].main);\r\n                    setBackground(bg);\r\n                }\r\n            }\r\n        }),\r\n    );\r\n\r\n    const removeLeftContainer = () => {\r\n        setIsShow(false);\r\n    }\r\n\r\n    const setBackground = (image: any) => {\r\n        leftRef.current.style.backgroundImage = `url(${image})`;\r\n    }\r\n\r\n    const forecast = (coord: Coordinates) => {\r\n        setIsShowChart(true);\r\n    }\r\n\r\n    return <div className=\"popup\">\r\n        {\r\n            isShownChart && <Chart />\r\n        }\r\n        <div className={isShown ? \"left-container padding-75\" : \"left-container\"} ref={leftRef}>\r\n            <div className=\"weathers\">\r\n                {\r\n                    (weathers && isShown) &&\r\n                    weathers.map((item, i) =>\r\n                        <WeatherDetail weather={item} key={i} click={setBackground} forecast={forecast} />\r\n                    )\r\n                }\r\n            </div>\r\n        </div>\r\n        <div className={isShown ? \"close-left-show\" : \"close-left-hide\"}>\r\n            <div className=\"close-container\" onClick={removeLeftContainer}>\r\n                <div className=\"leftright\"></div>\r\n                <div className=\"rightleft\"></div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n})\r\n\r\nexport default LeftComponent;","import React, { useEffect, useRef } from 'react';\nimport { City } from \"../../constants/typeDefinition\";\nimport L from \"leaflet\"\nimport \"leaflet-draw\"\nimport { removeDupWithProp, unSignedArray } from '../../constants/Utils'\n\nimport LeftComponent from '../popup/LeftComponent'\n\nconst cities: City[] = require(\"../../city.list.json\");\n\nconst MapComponent = () => {\n\n  const childRef: any = useRef();\n\n  useEffect(() => {\n    let map = L.map(\"map\").setView([\n      10.21525517768127, 105.90577133424291], 8);\n\n    const options = {\n      enableHighAccuracy: true,\n      timeout: 5000,\n      maximumAge: 0\n    };\n\n    const getGeo = (pos: any) => {\n      const crd = pos.coords;\n      map.setView([\n        crd.latitude, crd.longitude], 8);\n    }\n\n    const errGeo = (err: any) => {\n      map.setView([\n        10.21525517768127, 105.90577133424291], 8);\n    }\n\n    navigator.geolocation.getCurrentPosition(getGeo, errGeo, options);\n\n    L.tileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {\n      attribution:\n        '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n    }).addTo(map);\n\n\n    const drawn_items = L.featureGroup([]).addTo(map);\n\n    const drawControl = new L.Control.Draw({\n      position: \"topleft\",\n      draw: {\n        circle: false,\n        polygon: false,\n        polyline: false,\n        circlemarker: false\n      },\n      edit: {\n        featureGroup: drawn_items\n      }\n    });\n\n    map.addControl(drawControl);\n\n\n    map.on(L.Draw.Event.CREATED, async function (event: any) {\n      let layer = event.layer;\n      drawn_items.addLayer(layer);\n      if (event.layerType === \"rectangle\") {\n        const bound = layer.getBounds();\n        const weathers = await Promise.all(getWeathers(bound));\n        if (weathers instanceof Error) {\n          console.log(weathers);\n        } else {\n          childRef.current.getValue(weathers);\n        }\n      }\n      if (event.layerType === \"marker\") {\n        const coord = layer._latlng;\n        const weather = await getWeather(coord);\n        if (weather instanceof Error) {\n          alert(weather);\n        } else {\n          childRef.current.getValue([weather]);\n        }\n      }\n    });\n  })\n\n\n  const getWeathers = (bound: any): any => {\n    try {\n      const rectangleCities = cities.filter(city => bound.contains(city.coord));\n      const arrUnsign = unSignedArray(rectangleCities, \"name\");\n      const arrWithoutDup = removeDupWithProp(arrUnsign, \"name\");\n      const apiWeather = arrWithoutDup.map(async (city) => {\n        const requestLink = `https://api.openweathermap.org/data/2.5/weather?id=${city.id}&units=metric&appid=671129d1fe0e5b8dfac8cf570540017e`;\n        const weather = await fetch(requestLink).then((res: any) => {\n          if (res.status === 200) {\n            return res.json();\n          } else {\n            throw new Error(\"Request quá nhiều\");\n          }\n        }\n        ).catch(err => {\n          console.log(err)\n          return err;\n        });\n        return weather;\n      });\n      return apiWeather;\n    } catch (err) {\n      console.log(err);\n      return err;\n    }\n\n\n  }\n\n  const getWeather = (coord: any) => {\n    try {\n      const requestLink = `https://api.openweathermap.org/data/2.5/weather?lat=${coord.lat}&lon=${coord.lng}&units=metric&appid=671129d1fe0e5b8dfac8cf570540017e`;\n      const weather = fetch(requestLink).then((res: any) => {\n        if (res.status === 200) {\n          return res.json();\n        } else {\n          throw new Error(\"Request quá nhiều\")\n        }\n      }).catch(err => {\n        return err;\n      });\n      return weather;\n    } catch (err) {\n      return err;\n    }\n  }\n\n\n  return (\n    <div id=\"containermap\">\n      <div id=\"map\" />\n      <LeftComponent ref={childRef} />\n    </div>\n  )\n}\n\nexport default MapComponent;","import React from 'react'\r\nimport MapComponent from '../components/map/map'\r\n\r\nconst Home = () => {\r\n    return (\r\n        <>\r\n            <MapComponent></MapComponent>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Home;","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport \"./App.css\"\n\nimport Home from \"./pages/Home\";\n\nconst App = () => {\n  return (\n    <Home />\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}